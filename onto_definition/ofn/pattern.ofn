Prefix(:=<http://www.essepuntato.it/2008/12/pattern#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(owl2xml:=<http://www.w3.org/2006/12/owl2-xml#>)
Prefix(pattern:=<http://www.essepuntato.it/2008/12/pattern#>)


Ontology(<http://www.essepuntato.it/2008/12/pattern>
Annotation(dc:creator "Angelo Di Iorio")
Annotation(dc:creator "Fabio Vitali")
Annotation(dc:creator "Silvio Peroni")
Annotation(dc:date "2013-07-16")
Annotation(dc:description "The idea of using patterns to produce reusable and high-quality assets is not new in the literature. Software engineers, architects (as Alexander who first introduced this term) and designers very often use – or rather reuse – patterns to handle problems which recur over and over. Patterns have also been studied to modularize and customize web ontologies (http://ontologydesignpatterns.org). They guarantee the flexibility and maintainability of concepts and solutions in several heterogeneous scenarios.

We've been investigating patterns for XML documents for some time. The overall goal of this research is to understand how the structure of digital documents can be segmented into atomic components, that can be manipulated independently and re-flowed in different contexts. Instead of defining a large number of complex and diversified structures, we have identified a small number of structures/patterns that are sufficient to express what most users need. Our idea is that a low number of patterns are enough to capture the most relevant document structures."@en)
Annotation(dc:title "The Pattern Ontology
Describing documents by means of their structural components"@en)
Annotation(rdfs:comment "An ontology defining formally patterns for segmenting a document into atomic components, in order to be manipulated independently and re-flowed in different contexts."@en)
Annotation(rdfs:label "pattern ontology"@en)
Annotation(owl:backwardCompatibleWith <http://dwellonit.svn.sourceforge.net/viewvc/dwellonit/StructuralPattern/Pattern-1_4.owl>)
Annotation(owl:priorVersion <http://dwellonit.svn.sourceforge.net/viewvc/dwellonit/StructuralPattern/Pattern-1_4.owl>)
Annotation(owl:versionInfo "1.4.2")

Declaration(Class(pattern:Atom))
Declaration(Class(pattern:Block))
Declaration(Class(pattern:Bucket))
Declaration(Class(pattern:Container))
Declaration(Class(pattern:Field))
Declaration(Class(pattern:Flat))
Declaration(Class(pattern:HeadedContainer))
Declaration(Class(pattern:Inline))
Declaration(Class(pattern:Marker))
Declaration(Class(pattern:Meta))
Declaration(Class(pattern:Milestone))
Declaration(Class(pattern:Mixed))
Declaration(Class(pattern:NonStructured))
Declaration(Class(pattern:NonTextual))
Declaration(Class(pattern:Pattern))
Declaration(Class(pattern:Popup))
Declaration(Class(pattern:Record))
Declaration(Class(pattern:Structured))
Declaration(Class(pattern:Table))
Declaration(Class(pattern:Textual))
Declaration(Class(owl:Thing))
Declaration(ObjectProperty(pattern:contains))
Declaration(ObjectProperty(pattern:containsAsHeader))
Declaration(ObjectProperty(pattern:isContainedBy))
Declaration(ObjectProperty(pattern:isContainedByAsHeader))
Declaration(DataProperty(pattern:canContainHeteronymousElements))
Declaration(DataProperty(pattern:canContainHomonymousElements))
Declaration(DataProperty(pattern:hasName))
Declaration(AnnotationProperty(dc:creator))
Declaration(AnnotationProperty(dc:date))
Declaration(AnnotationProperty(dc:description))
Declaration(AnnotationProperty(dc:title))
Declaration(AnnotationProperty(rdfs:comment))
Declaration(AnnotationProperty(rdfs:label))
Declaration(AnnotationProperty(owl:versionInfo))

############################
#   Object Properties
############################

# Object Property: pattern:contains (contains)

AnnotationAssertion(rdfs:comment pattern:contains "A structured element contains another generic element."@en)
AnnotationAssertion(rdfs:label pattern:contains "contains"@en)
InverseObjectProperties(pattern:contains pattern:isContainedBy)
ObjectPropertyDomain(pattern:contains pattern:Structured)

# Object Property: pattern:containsAsHeader (contains as header)

AnnotationAssertion(rdfs:comment pattern:containsAsHeader "A structured element contains another generic element as part of its header."@en)
AnnotationAssertion(rdfs:label pattern:containsAsHeader "contains as header"@en)
SubObjectPropertyOf(pattern:containsAsHeader pattern:contains)
InverseObjectProperties(pattern:containsAsHeader pattern:isContainedByAsHeader)

# Object Property: pattern:isContainedBy (is contained by)

AnnotationAssertion(rdfs:comment pattern:isContainedBy "An element that is contained by another structured element."@en)
AnnotationAssertion(rdfs:label pattern:isContainedBy "is contained by"@en)

# Object Property: pattern:isContainedByAsHeader (is contained by as header)

AnnotationAssertion(rdfs:comment pattern:isContainedByAsHeader "An element is contained by another structured element as part of its header."@en)
AnnotationAssertion(rdfs:label pattern:isContainedByAsHeader "is contained by as header"@en)
SubObjectPropertyOf(pattern:isContainedByAsHeader pattern:isContainedBy)


############################
#   Data Properties
############################

# Data Property: pattern:canContainHeteronymousElements (can contain heteronymous elements)

AnnotationAssertion(rdfs:comment pattern:canContainHeteronymousElements "A hierarchical-based entity contains al least two entities having different names."@en)
AnnotationAssertion(rdfs:label pattern:canContainHeteronymousElements "can contain heteronymous elements"@en)
FunctionalDataProperty(pattern:canContainHeteronymousElements)
DataPropertyDomain(pattern:canContainHeteronymousElements pattern:Structured)
DataPropertyRange(pattern:canContainHeteronymousElements xsd:boolean)

# Data Property: pattern:canContainHomonymousElements (can contain homonymous elements)

AnnotationAssertion(rdfs:comment pattern:canContainHomonymousElements "A hierarchical-based entity contains al least two entities that share the same name."@en)
AnnotationAssertion(rdfs:label pattern:canContainHomonymousElements "can contain homonymous elements"@en)
FunctionalDataProperty(pattern:canContainHomonymousElements)
DataPropertyDomain(pattern:canContainHomonymousElements pattern:Structured)
DataPropertyRange(pattern:canContainHomonymousElements xsd:boolean)

# Data Property: pattern:hasName (has name)

AnnotationAssertion(rdfs:comment pattern:hasName "The name of a particular element."@en)
AnnotationAssertion(rdfs:label pattern:hasName "has name"@en)
FunctionalDataProperty(pattern:hasName)
DataPropertyRange(pattern:hasName xsd:string)



############################
#   Classes
############################

# Class: pattern:Atom (atom element)

AnnotationAssertion(rdfs:comment pattern:Atom "This class is defined to describe literal text that is part of the document body. Moreover, similarly to Inline, elements following the Atom pattern can only be contained within block or inline elements (and consequently they also cannot be used as root elements of documents). It can contain textual content and no other elements."@en)
AnnotationAssertion(rdfs:label pattern:Atom "atom element"@en)
EquivalentClasses(pattern:Atom ObjectIntersectionOf(pattern:Flat ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline))))
SubClassOf(pattern:Atom ObjectSomeValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline)))
DisjointClasses(pattern:Atom pattern:Field)

# Class: pattern:Block (block element)

AnnotationAssertion(rdfs:comment pattern:Block "This class organise the document content as a sequence of nestable elements and text nodes. In particular, elements following this pattern can contain text and other elements compliant with the patterns Inline, Atom, Milestones and Popup, which will be introduced in the following. Furthermore, it is a requirement that block elements are contained only by container and popup elements"@en)
AnnotationAssertion(rdfs:label pattern:Block "block element"@en)
EquivalentClasses(pattern:Block ObjectIntersectionOf(pattern:Mixed ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Container pattern:Popup))))
SubClassOf(pattern:Block ObjectAllValuesFrom(pattern:contains ObjectUnionOf(pattern:Atom pattern:Inline pattern:Milestone pattern:Popup)))
DisjointClasses(pattern:Block pattern:Inline)

# Class: pattern:Bucket (bucket element)

AnnotationAssertion(rdfs:comment pattern:Bucket "The class of elements that can contain other elements but no text nodes."@en)
AnnotationAssertion(rdfs:label pattern:Bucket "bucket element"@en)
SubClassOf(pattern:Bucket pattern:NonTextual)
SubClassOf(pattern:Bucket pattern:Structured)
DisjointClasses(pattern:Bucket pattern:Marker)

# Class: pattern:Container (container element)

AnnotationAssertion(rdfs:comment pattern:Container "This class concerns the structural organization of a document. Elements following this pattern contain no textual content and contain only elements compliant with the patterns: Meta, Field, Block and any subtype of Container. It is disjointed with the pattern Popup, although they share the same content model."@en)
AnnotationAssertion(rdfs:label pattern:Container "container element"@en)
EquivalentClasses(pattern:Container ObjectIntersectionOf(pattern:Bucket ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Container pattern:Popup))))
SubClassOf(pattern:Container ObjectAllValuesFrom(pattern:contains ObjectUnionOf(pattern:Block pattern:Container pattern:Field pattern:Meta)))
DisjointClasses(pattern:Container pattern:Popup)

# Class: pattern:Field (field element)

AnnotationAssertion(rdfs:comment pattern:Field "This class is defined to describe literal metadata or text that is not really part of the document body, contrarily to its disjointed sibling Atom. Its main difference with Meta is that Field can contain textual content."@en)
AnnotationAssertion(rdfs:label pattern:Field "field element"@en)
EquivalentClasses(pattern:Field ObjectIntersectionOf(pattern:Flat ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Container pattern:Popup))))

# Class: pattern:Flat (flat element)

AnnotationAssertion(rdfs:comment pattern:Flat "The class of elements that can contain text nodes but no elements."@en)
AnnotationAssertion(rdfs:label pattern:Flat "flat element"@en)
SubClassOf(pattern:Flat pattern:NonStructured)
SubClassOf(pattern:Flat pattern:Textual)
DisjointClasses(pattern:Flat pattern:Mixed)

# Class: pattern:HeadedContainer (headed-container element)

AnnotationAssertion(rdfs:comment pattern:HeadedContainer "This class describes container elements whose content model need to begin with one or more block elements (the heading), specified through the property containsAsHeader."@en)
AnnotationAssertion(rdfs:label pattern:HeadedContainer "headed-container element"@en)
SubClassOf(pattern:HeadedContainer ObjectIntersectionOf(pattern:Container ObjectAllValuesFrom(pattern:containsAsHeader pattern:Block)))

# Class: pattern:Inline (inline element)

AnnotationAssertion(rdfs:comment pattern:Inline "This class has the same use and content model of the pattern Block, but differing primarily because a) inline elements can contain other elements compliant with the same pattern while block elements cannot, and b) inline elements must always be contained by other block or inline elements and by no other type of element.

These constraints also imply that inline elements cannot be used as root elements of documents and that the class Block is disjoint with the class Inline (i.e., a markup element cannot be a block and an inline at the same time)."@en)
AnnotationAssertion(rdfs:label pattern:Inline "inline element"@en)
EquivalentClasses(pattern:Inline ObjectIntersectionOf(pattern:Mixed ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline))))
SubClassOf(pattern:Inline ObjectSomeValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline)))
SubClassOf(pattern:Inline ObjectAllValuesFrom(pattern:contains ObjectUnionOf(pattern:Atom pattern:Inline pattern:Milestone pattern:Popup)))

# Class: pattern:Marker (marker element)

AnnotationAssertion(rdfs:comment pattern:Marker "The class of elements that can contain neither text nodes nor elements."@en)
AnnotationAssertion(rdfs:label pattern:Marker "marker element"@en)
SubClassOf(pattern:Marker pattern:NonStructured)
SubClassOf(pattern:Marker pattern:NonTextual)

# Class: pattern:Meta (meta element)

AnnotationAssertion(rdfs:comment pattern:Meta "This class describes elements that contain neither other elements nor textual content. Contrarily to the pattern Milestone, which was meant to describe markup elements that impact the document because of their location, the main feature of its disjoint sibling is the mere existence, independently from the position it has within the document. Meta elements convey metadata information about the document or part of it, independently of where they are. Thus, meta elements can be contained only within container elements."@en)
AnnotationAssertion(rdfs:label pattern:Meta "meta element"@en)
EquivalentClasses(pattern:Meta ObjectIntersectionOf(pattern:Marker ObjectSomeValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Container pattern:Popup))))
DisjointClasses(pattern:Meta pattern:Milestone)

# Class: pattern:Milestone (milestone element)

AnnotationAssertion(rdfs:comment pattern:Milestone "This class describe elements that contain neither other elements nor textual content. Moreover, similarly to Inline, elements following the Milestone pattern can only be contained within block or inline elements (and consequently they also cannot be used as root elements of documents).

The distinctive characteristic of the pattern Milestone is the location it assumes within the document."@en)
AnnotationAssertion(rdfs:label pattern:Milestone "milestone element"@en)
EquivalentClasses(pattern:Milestone ObjectIntersectionOf(pattern:Marker ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline))))
SubClassOf(pattern:Milestone ObjectSomeValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline)))

# Class: pattern:Mixed (mixed element)

AnnotationAssertion(rdfs:comment pattern:Mixed "The class of elements that can contain other elements and text nodes."@en)
AnnotationAssertion(rdfs:label pattern:Mixed "mixed element"@en)
SubClassOf(pattern:Mixed pattern:Structured)
SubClassOf(pattern:Mixed pattern:Textual)

# Class: pattern:NonStructured (non-structured element)

AnnotationAssertion(rdfs:comment pattern:NonStructured "The class of elements that cannot contain other elements."@en)
AnnotationAssertion(rdfs:label pattern:NonStructured "non-structured element"@en)
EquivalentClasses(pattern:NonStructured ObjectComplementOf(pattern:Structured))
SubClassOf(pattern:NonStructured pattern:Pattern)
DisjointClasses(pattern:NonStructured pattern:Structured)

# Class: pattern:NonTextual (non-textual element)

AnnotationAssertion(rdfs:comment pattern:NonTextual "The class of elements that cannot have textual content in their content models."@en)
AnnotationAssertion(rdfs:label pattern:NonTextual "non-textual element"@en)
EquivalentClasses(pattern:NonTextual ObjectComplementOf(pattern:Textual))
SubClassOf(pattern:NonTextual pattern:Pattern)
DisjointClasses(pattern:NonTextual pattern:Textual)

# Class: pattern:Pattern (pattern-based element)

AnnotationAssertion(rdfs:comment pattern:Pattern "A structural pattern is an atomic component of a document, that is able to capture a recurrent and well knwon structure of a document.

Any entity belonging to this class is compliant with exactly one structural pattern."@en)
AnnotationAssertion(rdfs:label pattern:Pattern "pattern-based element"@en)
SubClassOf(pattern:Pattern owl:Thing)

# Class: pattern:Popup (popup element)

AnnotationAssertion(rdfs:comment pattern:Popup "This class defines bucket elements that are only present within block and inline elements. Popup elements are used whenever complex structures need to be placed within content elements such as paragraphs. "@en)
AnnotationAssertion(rdfs:label pattern:Popup "popup element"@en)
EquivalentClasses(pattern:Popup ObjectIntersectionOf(pattern:Bucket ObjectAllValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline))))
SubClassOf(pattern:Popup ObjectSomeValuesFrom(pattern:isContainedBy ObjectUnionOf(pattern:Block pattern:Inline)))
SubClassOf(pattern:Popup ObjectAllValuesFrom(pattern:contains ObjectUnionOf(pattern:Block pattern:Container pattern:Field pattern:Meta)))

# Class: pattern:Record (record element)

AnnotationAssertion(rdfs:comment pattern:Record "This class describes container elements that can only contain heterogeneous and non repeatable elements."@en)
AnnotationAssertion(rdfs:label pattern:Record "record element"@en)
EquivalentClasses(pattern:Record ObjectIntersectionOf(pattern:Container DataHasValue(pattern:canContainHeteronymousElements "true"^^xsd:boolean) DataHasValue(pattern:canContainHomonymousElements "false"^^xsd:boolean)))

# Class: pattern:Structured (structured element)

AnnotationAssertion(rdfs:comment pattern:Structured "The class of elements that can contain other elements."@en)
AnnotationAssertion(rdfs:label pattern:Structured "structured element"@en)
SubClassOf(pattern:Structured pattern:Pattern)

# Class: pattern:Table (table element)

AnnotationAssertion(rdfs:comment pattern:Table "This class describes container elements that must contain only homogeneous elements (but they can be repeated)."@en)
AnnotationAssertion(rdfs:label pattern:Table "table element"@en)
EquivalentClasses(pattern:Table ObjectIntersectionOf(pattern:Container DataHasValue(pattern:canContainHeteronymousElements "false"^^xsd:boolean) DataHasValue(pattern:canContainHomonymousElements "true"^^xsd:boolean)))

# Class: pattern:Textual (textual element)

AnnotationAssertion(rdfs:comment pattern:Textual "The class of elements that can have textual content in their content models."@en)
AnnotationAssertion(rdfs:label pattern:Textual "textual element"@en)
SubClassOf(pattern:Textual pattern:Pattern)


DisjointClasses(pattern:HeadedContainer pattern:Record pattern:Table)
# DLSafeRule(Body(ClassAtom(pattern:Block Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Block Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Container Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Container Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Field Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Field Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Inline Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Inline Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Meta Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Meta Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Milestone Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Milestone Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Pattern Variable(pattern:y)) ClassAtom(pattern:Textual Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:g)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:g)))Head(ClassAtom(pattern:Textual Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Record Variable(pattern:x)))Head(DataPropertyAtom(pattern:canContainHomonymousElements Variable(pattern:x) "false"^^xsd:boolean)))
# DLSafeRule(Body(ClassAtom(pattern:Record Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Record Variable(pattern:y))))
# DLSafeRule(Body(ClassAtom(pattern:Table Variable(pattern:x)))Head(DataPropertyAtom(pattern:canContainHeteronymousElements Variable(pattern:x) "false"^^xsd:boolean)))
# DLSafeRule(Body(ClassAtom(pattern:Table Variable(pattern:x)) ObjectPropertyAtom(pattern:contains Variable(pattern:x) Variable(pattern:y)) ObjectPropertyAtom(pattern:contains Variable(pattern:x) Variable(pattern:z)) DataPropertyAtom(pattern:hasName Variable(pattern:z) Variable(pattern:s)))Head(DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s))))
# DLSafeRule(Body(ClassAtom(pattern:Table Variable(pattern:x)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:s)))Head(ClassAtom(pattern:Table Variable(pattern:y))))
# DLSafeRule(Body(ObjectPropertyAtom(pattern:contains Variable(pattern:p) Variable(pattern:x)) ObjectPropertyAtom(pattern:contains Variable(pattern:p) Variable(pattern:y)) DataPropertyAtom(pattern:hasName Variable(pattern:x) Variable(pattern:s)) DataPropertyAtom(pattern:hasName Variable(pattern:y) Variable(pattern:t)) BuiltInAtom(swrlb:notEqual Variable(pattern:s) Variable(pattern:t)))Head(DataPropertyAtom(pattern:canContainHeteronymousElements Variable(pattern:p) "true"^^xsd:boolean)))
# DLSafeRule(Body(ObjectPropertyAtom(pattern:contains Variable(<urn:swrl#p>) Variable(<urn:swrl#x>)) ObjectPropertyAtom(pattern:contains Variable(<urn:swrl#p>) Variable(<urn:swrl#y>)) DataPropertyAtom(pattern:hasName Variable(<urn:swrl#x>) Variable(<urn:swrl#s>)) DataPropertyAtom(pattern:hasName Variable(<urn:swrl#y>) Variable(<urn:swrl#s>)))Head(DataPropertyAtom(pattern:canContainHomonymousElements Variable(<urn:swrl#p>) "true"^^xsd:boolean)))
)
